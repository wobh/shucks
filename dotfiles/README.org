#+TITLE: Shucks! dotfiles README
#+DATE: <2014-10-21 Tue>
#+AUTHOR: William Clifford
#+EMAIL: wobh@yahoo.com
#+DESCRIPTION:
#+KEYWORDS:

* Introduction

Everyone comes up with their own way to try to preserve and reproduce
the environment settings. Here's my attempt.

As with all projects in this repo, it's provisional and
experimental. It might be best used as a cautionary example.

* Design considerations

The home directory is the main place where my configurations are used
and developed. They are effectively iterated over, tested, and
expanded every day. I want a system that synchronizes files in my home
directory with an archive under source control.

The home directory is where the scripts and configurations themselves
live. The so these scripts are written to be installed in =~/bin=. The
configuration files are dotfiles in my $HOME.

* Dotfile management

The system is primitive, relying on just three shell scripts, and two
configuration files, and one folder.

** global variables

*** =$DOTKEEP=

=$DOTKEEP= specifies the location of a folder where dotfiles are
archived. It is defined in =~/.dotenvs= and defaults to =~/dotfiles=.

** configuration

*** =etc/dotenvs=


Installed as =~/.dotenvs=, it defines =DOTKEEP=, the sole global
variable for this project. It is sourced by the the scripts.

*** =etc/dotlist=

Installed as =~/.dotlist=, it is a manifest of files in the =$DOTKEEP=
archive. It is used by =dotsync= and =dotdiff= to select only those
files which have to be managed. It is updated by =dotsend=.

** scripts

*** =Makefile=

Provides basic installation and uninstallation targets for =make=. As
mentioned earlier, this software is not meant for wider use, it's for
practice. This =Makefile= is likewise, for practice.

*** =cmd/dotsend.sh=

Installed as =~/bin/dotsend=, it sends a copy of one or more given
files into the =$DOTKEEP= archive, and updates =~/.dotlist= with the
=$DOTKEEP= directory listing. It has the following alternate uses:

- synchronize a single file or a selection of files
- with =-f=: creates =$DOTKEEP= or =~/.dotlist= if they don't exist
- with =-r=: refresh =~/.dotlist= with current =$DOTKEEP=
- with =-t=: specify an alternate location

**** Usage notes

- options may be given no more than once
- options =-f= and =-r= cannot be used together
- =-r= does not take file arguments, although it should work with =-t=
- otherwise, with no arguments, =dotsend= prints a help message

**** Example uses

- =~$ dotsend .bashrc=
- =~$ dotsend -r=
- =~% dotsend -t dottest .zshrc .zprofile=

*** =cmd/dotsync.sh=

Installed as =~/bin/dotsync=, it synchronizes a given directory with
=$DOTKEEP= or other folder specified with =-t= folder. The folder
argument must have a =.dotenvs= in it.

**** Usage notes

- option may be given no more than once
- with no arguments, =dotsync= prints a help message

**** Example uses

- =~$ dotsync .=
= =~/bin$ dotsync ~=
= =~/foo$ dotsync -t ~/dottest .=

*** =cmd/dotdiff.sh=

Installed as =~/bin/dotdiff=, it accepts either a file or a directory
for an argument. If given a single file, it checks the file against
it's copy in =$DOTKEEP= or a provided target directory and prints
differences. If given a directory it checks all the files in the
directory's =.dotlist= against their copies in =$DOTKEEP= or a
provided target directory and prints differences.

**** Usage notes

- option may be given no more than once
- currently accepts one argument
- with no arguments, =dotdiff= prints a help message

**** Example uses

- =~$ dotdiff .bashrc=
- =~$ dotdiff .=
- =~$ dotdiff -t altvault $HOME=

* Known bugs and faults

** duplicated error texts in scripts

I couldn't think of a good way to share the error texts, while
focusing on a basic home directory install, so they're copy-pasted
between the scripts.

** =dotsend= is slow

=dotsend= uses =find= to verify that any file you send exists
somewhere below the current directory. It uses =find= again to update
=~/.dotlist=.

** =dotdiff= currently only accepts one argument

It would be nice if it could check multiple arguments.

** =dotsync=

=dotsync= uses =rsync= even for making updates to local =$DOTKEEP=
archives. So far it's working pretty well.
* Future
I'm going to try using this for a while to see how I like it. If it
seems like it's okay, I'll investigate reimplementing it and forging
a new project, with the working title of "Homemaker".

* References
** github dotfiles
Github keeps a bunch of links to great dotfile examples and resources here:

- http://dotfiles.github.io/

** thoughtbot rcm
Somehow I overlooked this in my other research for this
project. It's a different approach, but obviously put together by
people more competant for the task.

- https://github.com/thoughtbot/rcm

** Kitchenplan

- https://github.com/kitchenplan/kitchenplan

** Boxen

- https://github.com/boxen/boxen
